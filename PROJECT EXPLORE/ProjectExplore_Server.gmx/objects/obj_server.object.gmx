<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Server
console_add("Version "+string(version));
console_add("Initializing Server Data");
console_add("Initiating Network");

// ds_lists
pl_name = ds_list_create();
pl_x = ds_list_create();
pl_y = ds_list_create();
pl_angle = ds_list_create();
pl_health = ds_list_create();
pl_food = ds_list_create();
pl_ip = ds_list_create();
pl_inv = ds_list_create();
pl_socket = ds_list_create();
pl_connect = ds_list_create();
pl_steamid = ds_list_create();

obj_x = ds_list_create();
obj_y = ds_list_create();
obj_id = ds_list_create();
obj_index = ds_list_create();
obj_var1 = ds_list_create();
obj_var2 = ds_list_create();
obj_var3 = ds_list_create();
obj_var4 = ds_list_create();

// ds_maps
world_tiles = ds_grid_create(2,2);
world_chunks = ds_grid_create(2,2);

// server steps
server_step = 0;

// server variables
server_socket = network_create_socket(network_socket_udp);
master_server_ip = "";
master_server_id = 0;
server_id = 0;
server_broadcast = 1;
ip = "192.168.0.2";
public_ip = "127.0.0.1";
port = 25565;
max_clients = 32;
server_name = "Project Explore Server";
server_pass = "";
server_ticks = 60;
cheat_check = 0;
broadcast_mode = 0;

// http variables
http_id = 0;

if ( directory_exists("player_data") == false )
{
    directory_create("player_data");
}

if ( file_exists("world_data.ini") == true )
{
    ini_open("world_data.ini");
    ds_grid_read(world_tiles,ini_read_string("world","world_tiles",""));
    ds_grid_read(world_chunks,ini_read_string("world","world_chunks",""));
    ds_list_read(obj_x,ini_read_string("objects","obj_x",""));
    ds_list_read(obj_y,ini_read_string("objects","obj_y",""));
    ds_list_read(obj_id,ini_read_string("objects","obj_id",""));
    ds_list_read(obj_index,ini_read_string("objects","obj_index",""));
    ds_list_read(obj_var1,ini_read_string("objects","obj_var1",""));
    ds_list_read(obj_var2,ini_read_string("objects","obj_var2",""));
    ds_list_read(obj_var3,ini_read_string("objects","obj_var3",""));
    ds_list_read(obj_var4,ini_read_string("objects","obj_var4",""));
    ini_close();
}
else
{
    ini_open("world_data.ini");
    ini_write_string("world","world_tiles","empty");
    ini_write_string("world","world_chunks","empty");
    ini_write_string("objects","obj_x","empty");
    ini_write_string("objects","obj_y","empty");
    ini_write_string("objects","obj_id","empty");
    ini_write_string("objects","obj_index","empty");
    ini_write_string("objects","obj_var1","empty");
    ini_write_string("objects","obj_var2","empty");
    ini_write_string("objects","obj_var3","empty");
    ini_write_string("objects","obj_var4","empty");
    ini_close();
}

if ( file_exists("server_info.ini") == true )
{
ini_open("server_info.ini");
server_name = ini_read_string("server","server_name","Project Explore Server");
server_pass = ini_read_string("server","server_pass","");
port = real(ini_read_string("server","port","25565"));
max_clients = real(ini_read_string("server","max_clients","32"));
server_ticks = real(ini_read_string("server","server_ticks","120"));
cheat_check = real(ini_read_string("server","cheat_check","0"));
server_broadcast = real(ini_read_string("server","server_broadcast","1"));
public_ip = ini_read_string("server","public_ip","127.0.0.1");
world_size = ini_read_real("server","world_size",1);
ini_close();
}
else
{
ini_open("server_info.ini");
ini_write_string("server","server_name","Project Explore Server");
ini_write_string("server","server_pass","");
ini_write_string("server","port","25565");
ini_write_string("server","max-clients","32");
ini_write_string("server","server_ticks","120");
ini_write_string("server","cheat_check","0");
ini_write_string("server","server_broadcast","1");
ini_write_string("server","public_ip","127.0.0.1");
ini_close();
}

server_step = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcasting
var player_count = string(ds_list_size(pl_connect))+"/"+string(max_clients);
var send_buffer = buffer_create(1,buffer_grow,1);
buffer_write(send_buffer,buffer_u8,69);
buffer_write(send_buffer,buffer_string,string(server_name));
buffer_write(send_buffer,buffer_string,string(public_ip));
buffer_write(send_buffer,buffer_string,string(player_count));
master_server_id = network_send_udp(server_socket,master_server_ip,6511,send_buffer,buffer_tell(send_buffer));
buffer_delete(send_buffer);
if ( master_server_id &lt; 0 )
{
    console_add("Server failed to send broadcast.");
}
else
{
    console_add("Server sent broadcast.");
}
alarm[0]=1800;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Steps

if ( server_step == 1 )
{
room_speed = server_ticks;
console_add("Getting Master Server IP Address...");
http_id = http_get("http://www.seabassandgazellestudios.com/patch-page.html");
server_id = network_create_server(network_socket_tcp,port,max_clients);
if ( server_id &lt; 0 )
{
console_add("Server failed to start...");
}
else
{
ds_grid_resize(world_chunks,(world_size*38400)/1280,(world_size*38400)/1280);
ds_grid_resize(world_tiles,(world_size*38400)/128,(world_size*38400)/128);
ini_open("world_data.ini");// Check world files
var str = ini_read_string("world","world_tiles","empty");
if ( str != "empty" )
{
ds_grid_read(world_tiles,str);console_add("World tiles loaded");
}
str = ini_read_string("world","world_chunks","empty");
if ( str != "empty" )
{
ds_grid_read(world_chunks,str);console_add("World chunks loaded");
}
console_add("Server Is Running");
}
server_step = 2;
exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Async Network
var sock = ds_map_find_value(async_load,"id");
var t = ds_map_find_value(async_load,"type");
if ( sock == server_id )
{

if ( t == network_type_connect )
{
var socket = ds_map_find_value(async_load,"id");
var ip = ds_map_find_value(async_load,"ip");
ds_list_add(pl_health,0);
ds_list_add(pl_socket,socket);
ds_list_add(pl_connect,0);
ds_list_add(pl_ip,ip);
ds_list_add(pl_x,0);
ds_list_add(pl_y,0);
ds_list_add(pl_angle,0);
ds_list_add(pl_steamid,0);
ds_list_add(pl_name,"");
ds_list_add(pl_food,100);
ds_list_add(pl_inv,"");
console_add("'"+string(ip)+"' connecting");
}

if ( t == network_type_disconnect )
{
var socket = ds_map_find_value(async_load,"socket");
var index = ds_list_find_index(pl_socket,socket);
var connection = ds_list_find_value(pl_connect,index);
    if (  connection == 0 )
    {
        ds_list_delete(pl_socket,index);
        ds_list_delete(pl_ip,index);
    }
    if (  connection == 1 )
    {
        var index = ds_list_find_index(pl_socket,socket);
        var name = ds_list_find_value(pl_name,index);
        console_add("'"+string(name)+"' has disconnected");
        ds_list_delete(pl_name,index);
        ds_list_delete(pl_x,index);
        ds_list_delete(pl_y,index);
        ds_list_delete(pl_health,index);
        ds_list_delete(pl_food,index);
        ds_list_delete(pl_ip,index);
        ds_list_delete(pl_socket,index);
        ds_list_delete(pl_connect,index);
        ds_list_delete(pl_angle,index);
        ds_list_delete(pl_speed,index);
        ds_grid_destroy(ds_list_find_value(pl_inv,index));
    }
}
}


var ip = ds_map_find_value(async_load,"ip");
if ( t == network_type_data )
{
    var net_buffer = ds_map_find_value(async_load,"buffer");
    var msg_id = buffer_read(net_buffer,buffer_u16);
    switch(msg_id)
    {
        case 1: // Client Inital Connection (First Connected)
        {
        var username = buffer_read(net_buffer,buffer_string);
        var steam_id = buffer_read(net_buffer,buffer_string);
        if ( file_exists("player_data/player_"+string(steam_id)+".dat") == true )
        {
        // Check for valid login info
        var pl_data_buffer = buffer_load("player_data/player_"+string(steam_id)+".dat");
        var pl_data_steamid = buffer_read(pl_data_buffer,buffer_string);
        var index = ds_list_find_index(pl_ip,ip);
        ds_list_replace(pl_name,index,username);
        ds_list_replace(pl_x,index,buffer_read(pl_data_buffer,buffer_s32));
        ds_list_replace(pl_y,index,buffer_read(pl_data_buffer,buffer_s32));
        ds_list_replace(pl_health,index,buffer_read(pl_data_buffer,buffer_s16));
        ds_list_replace(pl_food,index,buffer_read(pl_data_buffer,buffer_s16));
        ds_list_replace(pl_inv,index,buffer_read(pl_data_buffer,buffer_string));
        buffer_delete(pl_data_buffer);
        //var pl_data_pass = buffer_read(pl_data_buffer,buffer_string);
        var send_buffer = buffer_create(1,buffer_grow,1);
        buffer_write(send_buffer,buffer_u16,1);//msg_id
        buffer_write(send_buffer,buffer_s32,sock);
        buffer_write(send_buffer,buffer_bool,true);//login
        console_add("'"+string(username)+"' logged in.");
        network_send_packet(sock,send_buffer,buffer_tell(send_buffer));
        buffer_delete(pl_data_buffer);
        buffer_delete(send_buffer);
        }
        else
        {
        var send_buffer = buffer_create(1,buffer_grow,1);
        buffer_write(send_buffer,buffer_u8,1);//msg_id
        var client_socket = ds_map_find_value(async_load,"id");
        buffer_write(send_buffer,buffer_s32,client_socket);
        buffer_write(send_buffer,buffer_bool,true);//login
        network_send_packet(sock,send_buffer,buffer_tell(send_buffer));
        var pl_data_buffer = buffer_create(1,buffer_grow,1);
        buffer_write(pl_data_buffer,buffer_string,steam_id);
        buffer_write(pl_data_buffer,buffer_s32,round(random_range(0,real(ds_grid_width(world_tiles)*128)))); // player x
        buffer_write(pl_data_buffer,buffer_s32,round(random_range(0,real(ds_grid_height(world_tiles)*128)))); // player y
        buffer_write(pl_data_buffer,buffer_s32,100); // player health
        buffer_write(pl_data_buffer,buffer_s32,100); // player food
        buffer_write(pl_data_buffer,buffer_string,""); // player inventory
        buffer_save(pl_data_buffer,working_directory+"\player_data\player_"+string(steam_id)+".dat");
        buffer_delete(pl_data_buffer);
        buffer_delete(send_buffer);
        // Add Data To Lists
        ds_list_add(pl_name,username);
        ds_list_add(pl_steamid,steam_id);
        console_add("'"+string(username)+"' is a new player.");
        }
        break;
        }
        
        case 2: // Client connection has been verified, start sending map/player data 
        {
        var steam_id = buffer_read(net_buffer,buffer_string);
        ds_list_replace(pl_steamid,ds_list_find_index(pl_ip,ip),steam_id);
        var send_buffer = buffer_create(1,buffer_grow,1);
        buffer_write(send_buffer,buffer_u16,2);       
        buffer_write(send_buffer,buffer_u32,real(ds_grid_width(world_tiles))*128);
        buffer_write(send_buffer,buffer_u32,real(ds_grid_height(world_tiles))*128);
        var pl_data_buffer = buffer_load("player_data/player_"+string(steam_id)+".dat");
        buffer_read(pl_data_buffer,buffer_string);
        buffer_write(send_buffer,buffer_s32,buffer_read(pl_data_buffer,buffer_s32)); // x
        buffer_write(send_buffer,buffer_s32,buffer_read(pl_data_buffer,buffer_s32)); // y
        buffer_write(send_buffer,buffer_s32,buffer_read(pl_data_buffer,buffer_s32)); // health
        buffer_write(send_buffer,buffer_s32,buffer_read(pl_data_buffer,buffer_s32)); // food
        buffer_write(send_buffer,buffer_string,buffer_read(pl_data_buffer,buffer_string)); // inventory
        buffer_delete(pl_data_buffer);
        
        ini_open("world_data.ini");// Check world files
        var str = ini_read_string("world","world_tiles","empty");
        if ( str == "empty" )
        {
        buffer_write(send_buffer,buffer_bool,false);
        }
        else
        {
        buffer_write(send_buffer,buffer_bool,true);
        buffer_write(send_buffer,buffer_string,str);
        }
        str = ini_read_string("world","world_chunks","empty");
        if ( str == "empty" )
        {
        buffer_write(send_buffer,buffer_bool,false);
        }
        else
        {
        buffer_write(send_buffer,buffer_bool,true);
        buffer_write(send_buffer,buffer_string,str);
        }
        network_send_packet(sock,send_buffer,buffer_tell(send_buffer));
        break;
        }
        
        case 250: // Master server has sent us a ping to see if this server is still alive
        {
        var send_buffer = buffer_create(1,buffer_grow,1);
        buffer_write(send_buffer,buffer_u8,3);
        master_server_id = network_send_udp(server_socket,master_server_ip,6511,send_buffer,buffer_tell(send_buffer));
        buffer_delete(send_buffer);
        break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_server</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect to master server
if ds_map_find_value(async_load, "id") == http_id
    {
    if ds_map_find_value(async_load, "status") == 0
       {
       var str_base = string(ds_map_find_value(async_load, "result"));
       var str1 = str_base;
       var str2 = str_base;
       var count = string_length(str1);
       var pos = string_pos("Server Browser: ",str1);
       str1 = string_delete(str1,1,pos+15);
       pos = string_pos("(^3^)",str1);
       str1 = string_delete(str1,pos,pos+string_length(str1));
       master_server_ip = str1;
       console_add("Master Server IP Retrieved!");
       
       /*count = string_length(str2);
       pos = string_pos("Server Browser: ",str2);
       str2 = string_delete(str2,1,pos+15);
       show_message(str2);
       pos = string_pos("(^3^)",str2);
       str2 = string_delete(str2,pos,pos+string_length(str2));
       public_ip = str2;*/
       
       alarm[0]=10;
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game End

ds_list_destroy(pl_name);
ds_list_destroy(pl_x);
ds_list_destroy(pl_y);
ds_list_destroy(pl_health);
ds_list_destroy(pl_food);
ds_list_destroy(pl_socket);
ds_list_destroy(pl_ip);
ds_list_destroy(pl_inv);
ds_list_destroy(pl_angle);
ds_list_destroy(pl_connect);
ds_list_destroy(pl_steamid);

ds_list_destroy(obj_x);
ds_list_destroy(obj_y);
ds_list_destroy(obj_id);
ds_list_destroy(obj_index);
ds_list_destroy(obj_var1);
ds_list_destroy(obj_var2);
ds_list_destroy(obj_var3);
ds_list_destroy(obj_var4);

ds_grid_destroy(world_tiles);
ds_grid_destroy(world_chunks);

network_destroy(server_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
